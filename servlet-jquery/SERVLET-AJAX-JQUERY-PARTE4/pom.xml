<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>br.edu.fatecsjc</groupId>
	<artifactId>ProjetoServletDoVimerson</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging>
	
<!-- 	Servlets são objetos java capazes de receber as requisições do browser e devolver respostas. Então -->
<!-- fazemos uma requisição http e resposta http. O servlet vai receber os dados do cliente dentro de  -->
<!-- um cabeçalho http. Quem vai instanciar o servlet é um servlet container. Um servlet container é um -->
<!-- servidor que vai receber/interceptar as requisições http, pois ele já tem pronto uma série de tare -->
<!-- fas de comunicação http e transformar essas informações em objetos java, vamos dar um objeto java -->
<!-- pro servlet container e ele vai entregar em http pro browser. Quem faz a tradução entre http e  -->
<!-- objetos java é o http. A própria biblioteca JRE Standard Edition não tem servlet. No nosso  -->
<!-- computador existe uma pasta oculta ".m2" que guarda todas as dependências que já usamos do maven.
     Seguindo a estrutura MVC o servlet vai representar a camada de controle.  -->
  
	<dependencies>
		<dependency>
			<!--Essa dependência que permite usar a anotação @WebServlet. Então as vezes quando não
				encontramos uma anotação nos classpath do nosso projeto pode ser a versão das 
				dependências.  -->
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.0.1</version>
		</dependency>
	
	</dependencies>		  	

</project>